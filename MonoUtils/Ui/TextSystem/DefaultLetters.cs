using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace MonoUtils.Ui.TextSystem;

public class DefaultLetters : ILetter
{
    public static Texture2D Texture;

    public static Vector2 ImageSize => new Vector2(8, 8);

    // How many letter till line wrap on texture
    public static int TextureWidth => 8;

    public Rectangle GetImageLocation(int letter)
    {
        int x = letter % TextureWidth;
        int y = letter / TextureWidth;
        Vector2 location = new Vector2(ImageSize.X * x, ImageSize.Y * y);
        return new Rectangle(location.ToPoint(), ImageSize.ToPoint());
    }

    public Texture2D GetTexture()
        => Texture;

    public Vector2 GetFullSize()
        => ImageSize;

    public int Parse(string identifier)
    {
        Letters letter = identifier switch
        {
            "0" => Letters.Zero,
            "1" => Letters.One,
            "2" => Letters.Two,
            "3" => Letters.Three,
            "4" => Letters.Four,
            "5" => Letters.Five,
            "6" => Letters.Six,
            "7" => Letters.Seven,
            "8" => Letters.Eight,
            "9" => Letters.Nine,
            "A" => Letters.BigA,
            "B" => Letters.BigB,
            "C" => Letters.BigC,
            "D" => Letters.BigD,
            "E" => Letters.BigE,
            "F" => Letters.BigF,
            "G" => Letters.BigG,
            "H" => Letters.BigH,
            "I" => Letters.BigI,
            "J" => Letters.BigJ,
            "K" => Letters.BigK,
            "L" => Letters.BigL,
            "M" => Letters.BigM,
            "N" => Letters.BigN,
            "O" => Letters.BigO,
            "P" => Letters.BigP,
            "Q" => Letters.BigQ,
            "R" => Letters.BigR,
            "S" => Letters.BigS,
            "T" => Letters.BigT,
            "U" => Letters.BigU,
            "V" => Letters.BigV,
            "W" => Letters.BigW,
            "X" => Letters.BigX,
            "Y" => Letters.BigY,
            "Z" => Letters.BigZ,
            "a" => Letters.SmallA,
            "b" => Letters.SmallB,
            "c" => Letters.SmallC,
            "d" => Letters.SmallD,
            "e" => Letters.SmallE,
            "f" => Letters.SmallF,
            "g" => Letters.SmallG,
            "h" => Letters.SmallH,
            "i" => Letters.SmallI,
            "j" => Letters.SmallJ,
            "k" => Letters.SmallK,
            "l" => Letters.SmallL,
            "m" => Letters.SmallM,
            "n" => Letters.SmallN,
            "o" => Letters.SmallO,
            "p" => Letters.SmallP,
            "q" => Letters.SmallQ,
            "r" => Letters.SmallR,
            "s" => Letters.SmallS,
            "t" => Letters.SmallT,
            "u" => Letters.SmallU,
            "v" => Letters.SmallV,
            "w" => Letters.SmallW,
            "x" => Letters.SmallX,
            "y" => Letters.SmallY,
            "z" => Letters.SmallZ,
            "Ä" => Letters.BigÄ,
            "Ö" => Letters.BigÖ,
            "Ü" => Letters.BigÜ,
            "ä" => Letters.SmallÄ,
            "ö" => Letters.SmallÖ,
            "ü" => Letters.SmallÜ,
            "[block]" => Letters.Block,
            "+" => Letters.Plus,
            "-" => Letters.Minus,
            "*" => Letters.Asterisk,
            "/" => Letters.Slash,
            "\\" => Letters.Backslash,
            "(" => Letters.BracketOpen,
            ")" => Letters.BracketClose,
            "[SBO]" => Letters.SquaredBracketOpen,
            "[SBC]" => Letters.SquaredBracketClose,
            "[" => Letters.SquaredBracketOpen,
            "]" => Letters.SquaredBracketClose,
            "{" => Letters.CurlyBracketOpen,
            "}" => Letters.CurlyBracketClose,
            "!" => Letters.Exclamation,
            "?" => Letters.Question,
            "%" => Letters.Percent,
            ">" => Letters.BiggerAs,
            "<" => Letters.SmallerAs,
            "=" => Letters.Equal,
            "." => Letters.Dot,
            ":" => Letters.DoubleDots,
            "," => Letters.Comma,
            ";" => Letters.Semicolon,
            "\"" => Letters.Quotation,
            " " => Letters.Space,
            "_" => Letters.Line,
            "|" => Letters.Pipe,
            _ => Letters.None
        };

        return (int)letter;
    }

    public Rectangle GetCharacterSpacing(int character)
    {
        return (Letters)character switch
        {
            Letters.Zero => new Rectangle(1, 0, 5, 8),
            Letters.One => new Rectangle(1, 0, 4, 8),
            Letters.Two => new Rectangle(1, 0, 5, 8),
            Letters.Three => new Rectangle(1, 0, 4, 8),
            Letters.Four => new Rectangle(1, 0, 5, 8),
            Letters.Five => new Rectangle(1, 0, 6, 8),
            Letters.Six => new Rectangle(1, 0, 5, 8),
            Letters.Seven => new Rectangle(1, 0, 6, 8),
            Letters.Eight => new Rectangle(1, 0, 5, 8),
            Letters.Nine => new Rectangle(1, 0, 5, 8),
            Letters.BigA => new Rectangle(1, 0, 5, 8),
            Letters.BigB => new Rectangle(1, 0, 5, 8),
            Letters.BigC => new Rectangle(1, 0, 4, 8),
            Letters.BigD => new Rectangle(1, 0, 5, 8),
            Letters.BigE => new Rectangle(1, 0, 5, 8),
            Letters.BigF => new Rectangle(1, 0, 5, 8),
            Letters.BigG => new Rectangle(1, 0, 5, 8),
            Letters.BigH => new Rectangle(1, 0, 5, 8),
            Letters.BigI => new Rectangle(1, 0, 1, 8),
            Letters.BigJ => new Rectangle(1, 0, 2, 8),
            Letters.BigK => new Rectangle(1, 0, 4, 8),
            Letters.BigL => new Rectangle(1, 0, 4, 8),
            Letters.BigM => new Rectangle(0, 0, 6, 8),
            Letters.BigN => new Rectangle(1, 0, 5, 8),
            Letters.BigO => new Rectangle(1, 0, 5, 8),
            Letters.BigP => new Rectangle(1, 0, 5, 8),
            Letters.BigQ => new Rectangle(1, 0, 5, 8),
            Letters.BigR => new Rectangle(1, 0, 5, 8),
            Letters.BigS => new Rectangle(1, 0, 5, 8),
            Letters.BigT => new Rectangle(1, 0, 5, 8),
            Letters.BigU => new Rectangle(1, 0, 5, 8),
            Letters.BigV => new Rectangle(1, 0, 5, 8),
            Letters.BigW => new Rectangle(0, 0, 7, 8),
            Letters.BigX => new Rectangle(1, 0, 5, 8),
            Letters.BigY => new Rectangle(1, 0, 5, 8),
            Letters.BigZ => new Rectangle(1, 0, 5, 8),
            Letters.Exclamation => new Rectangle(1, 0, 1, 8),
            Letters.Question => new Rectangle(1, 0, 5, 8),
            Letters.Slash => new Rectangle(2, 0, 4, 8),
            Letters.Minus => new Rectangle(2, 4, 4, 4),
            Letters.SmallerAs => new Rectangle(1, 1, 3, 6),
            Letters.Equal => new Rectangle(1, 2, 6, 5),
            Letters.BiggerAs => new Rectangle(2, 1, 3, 6),
            Letters.Asterisk => new Rectangle(1, 1, 5, 6),
            Letters.Plus => new Rectangle(1, 1, 5, 6),
            Letters.Percent => new Rectangle(0, 0, 8, 8),
            Letters.BracketOpen => new Rectangle(1, 0, 2, 8),
            Letters.BracketClose => new Rectangle(1, 0, 2, 8),
            Letters.Semicolon => new Rectangle(1, 2, 2, 6),
            Letters.Dot => new Rectangle(0, 6, 1, 2),
            Letters.Space => new Rectangle(0, 0, 2, 0),
            Letters.Line => new Rectangle(0, 7, 8, 1),
            Letters.DoubleDots => new Rectangle(3, 2, 1, 6),
            Letters.Comma => new Rectangle(2, 4, 2, 3),
            Letters.Quotation => new Rectangle(1, 0, 5, 8),
            Letters.Backslash => new Rectangle(2, 0, 4, 8),
            Letters.SmallA => new Rectangle(1, 2, 5, 6),
            Letters.SmallB => new Rectangle(1, 0, 4, 8),
            Letters.SmallC => new Rectangle(1, 2, 3, 6),
            Letters.SmallD => new Rectangle(1, 0, 4, 8),
            Letters.SmallE => new Rectangle(1, 2, 4, 6),
            Letters.SmallF => new Rectangle(1, 0, 3, 8),
            Letters.SmallG => new Rectangle(1, 2, 4, 6),
            Letters.SmallH => new Rectangle(1, 0, 4, 8),
            Letters.SmallI => new Rectangle(1, 0, 1, 8),
            Letters.SmallJ => new Rectangle(1, 0, 2, 8),
            Letters.SmallK => new Rectangle(1, 0, 3, 8),
            Letters.SmallL => new Rectangle(1, 0, 2, 8),
            Letters.SmallM => new Rectangle(1, 2, 5, 6),
            Letters.SmallN => new Rectangle(1, 2, 4, 6),
            Letters.SmallO => new Rectangle(1, 2, 4, 6),
            Letters.SmallP => new Rectangle(1, 2, 4, 6),
            Letters.SmallQ => new Rectangle(1, 2, 4, 6),
            Letters.SmallR => new Rectangle(1, 2, 3, 6),
            Letters.SmallS => new Rectangle(1, 2, 4, 6),
            Letters.SmallT => new Rectangle(1, 0, 3, 8),
            Letters.SmallU => new Rectangle(1, 2, 4, 6),
            Letters.SmallV => new Rectangle(1, 2, 5, 6),
            Letters.SmallW => new Rectangle(1, 2, 5, 6),
            Letters.SmallX => new Rectangle(1, 2, 5, 6),
            Letters.SmallY => new Rectangle(1, 1, 4, 6),
            Letters.SmallZ => new Rectangle(1, 2, 5, 6),
            Letters.SquaredBracketOpen => new Rectangle(1, 0, 2, 8),
            Letters.SquaredBracketClose => new Rectangle(1, 0, 2, 8),
            Letters.CurlyBracketOpen => new Rectangle(0, 0, 3, 8),
            Letters.CurlyBracketClose => new Rectangle(0, 0, 3, 8),
            Letters.Pipe => new Rectangle(0, 0, 1, 8),
            Letters.BigÄ => new Rectangle(1, 0, 5, 8),
            Letters.BigÖ => new Rectangle(1, 0, 5, 8),
            Letters.BigÜ => new Rectangle(1, 0, 5, 8),
            Letters.SmallÄ => new Rectangle(1, 0, 5, 8),
            Letters.SmallÖ => new Rectangle(1, 0, 4, 8),
            Letters.SmallÜ => new Rectangle(1, 0, 4, 8),
            _ => new Rectangle(0, 0, 8, 8)
        };
    }

    public enum Letters
    {
        None = -1,
        Zero,
        One,
        Two,
        Three,
        Four,
        Five,
        Six,
        Seven,
        Eight,
        Nine,
        BigA,
        BigB,
        BigC,
        BigD,
        BigE,
        BigF,
        BigG,
        BigH,
        BigI,
        BigJ,
        BigK,
        BigL,
        BigM,
        BigN,
        BigO,
        BigP,
        BigQ,
        BigR,
        BigS,
        BigT,
        BigU,
        BigV,
        BigW,
        BigX,
        BigY,
        BigZ,
        SmallA,
        SmallB,
        SmallC,
        SmallD,
        SmallE,
        SmallF,
        SmallG,
        SmallH,
        SmallI,
        SmallJ,
        SmallK,
        SmallL,
        SmallM,
        SmallN,
        SmallO,
        SmallP,
        SmallQ,
        SmallR,
        SmallS,
        SmallT,
        SmallU,
        SmallV,
        SmallW,
        SmallX,
        SmallY,
        SmallZ,
        BigÄ,
        BigÖ,
        BigÜ,
        SmallÄ,
        SmallÖ,
        SmallÜ,
        Block,
        Plus,
        Minus,
        Asterisk,
        Slash,
        Backslash,
        BracketOpen,
        BracketClose,
        SquaredBracketOpen,
        SquaredBracketClose,
        CurlyBracketOpen,
        CurlyBracketClose,
        Exclamation,
        Question,
        Percent,
        BiggerAs,
        SmallerAs,
        Equal,
        Dot,
        DoubleDots,
        Comma,
        Semicolon,
        Quotation,
        Space,
        Line,
        Pipe,
    }
}